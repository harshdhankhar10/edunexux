// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Smart classroom management system

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
  PARENT
  SUPPORT_STAFF
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CourseStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  password       String
  firstName      String
  lastName       String
  role           Role
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  profilePicture String?
  dateOfBirth    DateTime?
  isVerified     Boolean       @default(false)
  accountStatus  AccountStatus @default(ACTIVE)
  lastLogin      DateTime?
  phoneNumber    String?
  
  // Relationships
  documents      Document[]
  address        Address?
  
  // Role specific relationships
  student        Student?
  parent         Parent?
  instructor     Instructor?
  supportStaff   SupportStaff?
  admin          Admin?
  
  // Course relationships
  enrolledCourses    CourseEnrollment[]
  instructedCourses  Course[]              @relation("CourseInstructor")
  
  // Activity relationships
  createdAnnouncements Announcement[]      @relation("AnnouncementCreator")
  attendanceRecords    Attendance[]        @relation("StudentAttendance")
  grades               Grade[]             @relation("StudentGrades")
  assignments          AssignmentSubmission[] @relation("StudentSubmissions")
  examResults          ExamResult[]        @relation("StudentExamResults")
  
  // Community features
  forumPosts      ForumPost[]    @relation("ForumPostAuthor")
  forumComments   ForumComment[] @relation("CommentAuthor")
  notifications   Notification[] @relation("UserNotifications")
  
  @@map("users")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Course {
  id              String        @id @default(cuid())
  courseCode      String        @unique
  courseName      String
  description     String
  department      String
  level           String
  status          CourseStatus  @default(PLANNED)
  coverImage      String?
  maximumStudents Int
  enrollmentType  String
  prerequisites   String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  instructorId    String
  instructor      User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  classTimings    ClassTiming[]
  enrollments     CourseEnrollment[]
  materials       StudyMaterial[]
  assignments     Assignment[]
  exams           Exam[]
  announcements   Announcement[] @relation("CourseAnnouncements")
  attendance      Attendance[]   @relation("CourseAttendance")
  
  @@map("courses")
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model ClassTiming {
  id          String   @id @default(cuid())
  day         String
  startTime   DateTime
  endTime     DateTime
  roomNumber  String?
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("class_timings")
}

model StudyMaterial {
  id                   String   @id @default(cuid())
  title                String
  description          String?
  requiredTextBooks    String?
  additionalResources  String?
  courseFiles          String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  courseId             String
  course               Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("study_materials")
}

model Assignment {
  id             String   @id @default(cuid())
  title          String
  assignmentType String
  dueDate        DateTime
  totalPoints    Int
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions    AssignmentSubmission[]
  
  @@map("assignments")
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  submittedAt  DateTime @default(now())
  content      String?
  attachments  String[]
  score        Int?
  feedback     String?
  gradedAt     DateTime?
  
  // Relations
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation("StudentSubmissions", fields: [studentId], references: [id])
  
  @@unique([studentId, assignmentId])
  @@map("assignment_submissions")
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  examType    String
  examDate    DateTime
  totalPoints Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  results     ExamResult[]
  
  @@map("exams")
}

model ExamResult {
  id        String   @id @default(cuid())
  score     Int
  feedback  String?
  takenAt   DateTime @default(now())
  
  // Relations
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   User     @relation("StudentExamResults", fields: [studentId], references: [id])
  
  @@unique([studentId, examId])
  @@map("exam_results")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("events")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  creatorId   String
  creator     User     @relation("AnnouncementCreator", fields: [creatorId], references: [id])
  courseId    String
  course      Course   @relation("CourseAnnouncements", fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("announcements")
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime         @default(now())
  status    AttendanceStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relations
  courseId  String
  course    Course           @relation("CourseAttendance", fields: [courseId], references: [id], onDelete: Cascade)
  studentId String
  student   User             @relation("StudentAttendance", fields: [studentId], references: [id])
  
  @@unique([courseId, studentId, date])
  @@map("attendance")
}

model Grade {
  id          String   @id @default(cuid())
  grade       Int
  totalPoints Int
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  studentId   String
  student     User     @relation("StudentGrades", fields: [studentId], references: [id])
  
  @@unique([courseId, studentId])
  @@map("grades")
}

model Student {
  id         String   @id @default(cuid())
  gradeLevel String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     Parent?  @relation(fields: [parentId], references: [id])
  
  @@map("students")
}

model Parent {
  id          String    @id @default(cuid())
  relation    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students    Student[]
  
  @@map("parents")
}

model Instructor {
  id         String   @id @default(cuid())
  specialty  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("instructors")
}

model SupportStaff {
  id         String   @id @default(cuid())
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("support_staff")
}

model Admin {
  id          String   @id @default(cuid())
  permissions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admins")
}

model ForumPost {
  id        String         @id @default(cuid())
  title     String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  authorId  String
  author    User           @relation("ForumPostAuthor", fields: [authorId], references: [id])
  comments  ForumComment[]
  
  @@map("forum_posts")
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  authorId  String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("forum_comments")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}